lmBears = lm(Bears$Age ~ Bears$Weight, data = Bears)
summary(lmBears)
# Yhat = 0.219x + 2.613
abline(lmBears, col = "red")
legend(x = 10, y=NULL, legend = "Yhat = 0.219x + 2.613", fill = "black", col = "black", bg = "white")
plot(Bears$Weight, Bears$Age, main = "Bear Data", xlab = "ID", ylab = "Age",
col = "black")
# REMEBER: When you created a linear model you have to put your y variable first!
# So reverse the order from your plot in order for the linear line to be correct.
lmBears = lm(Bears$Age ~ Bears$Weight, data = Bears)
summary(lmBears)
# Yhat = 0.219x + 2.613
abline(lmBears, col = "red")
legend(x = 100, y=NULL, legend = "Yhat = 0.219x + 2.613", fill = "black", col = "black", bg = "white")
plot(Bears$Weight, Bears$Age, main = "Bear Data", xlab = "ID", ylab = "Age",
col = "black")
# REMEBER: When you created a linear model you have to put your y variable first!
# So reverse the order from your plot in order for the linear line to be correct.
lmBears = lm(Bears$Age ~ Bears$Weight, data = Bears)
summary(lmBears)
# Yhat = 0.219x + 2.613
abline(lmBears, col = "red")
legend(x = 200, y=NULL, legend = "Yhat = 0.219x + 2.613", fill = "black", col = "black", bg = "white")
plot(Bears$Weight, Bears$Age, main = "Bear Data", xlab = "ID", ylab = "Age",
col = "black")
# REMEBER: When you created a linear model you have to put your y variable first!
# So reverse the order from your plot in order for the linear line to be correct.
lmBears = lm(Bears$Age ~ Bears$Weight, data = Bears)
summary(lmBears)
# Yhat = 0.219x + 2.613
abline(lmBears, col = "red")
legend(x = 150, y=NULL, legend = "Yhat = 0.219x + 2.613", fill = "black", col = "black", bg = "white")
plot(Bears$Weight, Bears$Age, main = "Bear Data", xlab = "ID", ylab = "Age",
col = "black")
# REMEBER: When you created a linear model you have to put your y variable first!
# So reverse the order from your plot in order for the linear line to be correct.
lmBears = lm(Bears$Age ~ Bears$Weight, data = Bears)
summary(lmBears)
# Yhat = 0.219x + 2.613
abline(lmBears, col = "red")
legend(x = 170, y=NULL, legend = "Yhat = 0.219x + 2.613", fill = "black", col = "black", bg = "white")
plot(Bears$Weight, Bears$Age, main = "Bear Data", xlab = "ID", ylab = "Age",
col = "black")
# REMEBER: When you created a linear model you have to put your y variable first!
# So reverse the order from your plot in order for the linear line to be correct.
lmBears = lm(Bears$Age ~ Bears$Weight, data = Bears)
summary(lmBears)
# Yhat = 0.219x + 2.613
abline(lmBears, col = "red")
legend(x = 170, y=NULL, legend = "Yhat = 0.219x + 2.613", col = "black", bg = "white")
plot(Bears$Weight, Bears$Age, main = "Bear Data", xlab = "ID", ylab = "Age",
col = "black")
# REMEBER: When you created a linear model you have to put your y variable first!
# So reverse the order from your plot in order for the linear line to be correct.
lmBears = lm(Bears$Age ~ Bears$Weight, data = Bears)
summary(lmBears)
# Yhat = 0.219x + 2.613
abline(lmBears, col = "red")
legend(x = 175, y=NULL, legend = "Yhat = 0.219x + 2.613", col = "black", bg = "white")
library(readxl)
ex01_01 <- read_excel("data_sets/EXCEL/Chapter01/ex01-01.xls")
View(ex01_01)
hist(ex01_01)
hist(ex01_01$Percent_expenditures)
hist(ex01_01$Percent_expenditures, main = "Example Data From Chapter One", breaks = 20, col = "red")
boxplot(ex01_01)
boxplot(ex01_01, main = "Boxplot of Example Data", col = "blue")
boxplot(ex01_01, main = "Boxplot of Example Data", col = "blue", horizontal = TRUE)
boxplot(ex01_01, main = "Boxplot of Example Data", col = "blue")
# Working with data imprted from an Excel file
hist(ex01_01[,1], main = "Example Data From Chapter One", breaks = 20, col = "red")
# Working with data imprted from an Excel file
hist(ex01_01$Percent_expenditures, main = "Example Data From Chapter One", breaks = 20, col = "red")
sd(ex01_01)
sd(ex01_01$Percent_expenditures)
mean(ex01_01$Percent_expenditures)
var(ex01_01$Percent_expenditures)
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
plot(ex01_04)
library(readxl)
ex01_04 <- read_excel("data_sets/EXCEL/Chapter01/ex01-04.xls")
View(ex01_04)
plot(ex01_04, main = "New Example Data")
linearModelEx04 = lm(ex01_04)
abline(linearModelEx04, col = "green")
linearModelEx04 = lm(ex01_04)
plot(ex01_04, main = "New Example Data")
abline(linearModelEx04, col = "green")
summary(linearModelEx04)
plot(ex01_04, main = "New Example Data")
linearModelEx04 = lm( ex01_04$Luminance ~ ex01_04$Time, data = ex01_04)
linearModelEx04 = lm( ex01_04$Luminance ~ ex01_04$Time (hr):, data = ex01_04)
linearModelEx04 = lm( ex01_04)
abline(linearModelEx04, col = "green")
plot(ex01_04, main = "New Example Data")
summary(linearModelEx04) # Yhat = -8.388x + 22443.468
abline(linearModelEx04, col = "green")
linearModelEx04 = lm(ex01_04$Luminance: ~ ex01_04$Time (hr):, data = ex01_04)
linearModelEx04 = lm(ex01_04)
linearModelEx04 = lm(ex01_04[ ,2] ~ ex01_04[ ,1], data = ex01_04)
linearModelEx04 = lm(ex01_04[,2] ~ ex01_04[,1], data = ex01_04)
linearModelEx04 = lm(ex01_04[,2] ~ ex01_04[,1], data = ex01_04)
linearModelEx04 = lm(ex01_04)
plot(ex01_04, main = "New Example Data")
linearModelEx04 = lm(ex01_04[ , 2] ~ ex01_04[ , 1], data = ex01_04)
linearModelEx04 = lm(ex01_04[ , 2] ~ ex01_04[ , 1], data = ex01_04)
linearModelEx04 = lm(ex01_04[8,2] ~ ex01_04[8,1], data = ex01_04)
linearModelEx04 = lm(ex01_04[8,2] ~ ex01_04[8,1], data = ex01_04)
linearModelEx04 = lm(ex01_04[,2] ~ ex01_04[,1], data = ex01_04)
View(ex01_04)
ex01.04 <- read.csv("~/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/ASCII-COMMA/CH01/ex01-04.txt")
View(ex01.04)
linearModelEx04 = lm(ex01_04[,2] ~ ex01_04[,1], data = ex01_04)
rm(ex01_04)
library(readxl)
ex01_04 <- read_excel("data_sets/EXCEL/Chapter01/ex01-04.xls")
View(ex01_04)
linearModelEx04 = lm(ex01_04$Luminance ~ ex01_04$Time, data = ex01_04)
linearModelEx04 = lm(ex01_04$Luminance ~ ex01_04$Time, data = ex01_04)
plot(ex01_04, main = "New Example Data")
summary(linearModelEx04) # Yhat = -8.388x + 22443.468
abline(linearModelEx04, col = "green")
ex01_04 <- read_excel("data_sets/EXCEL/Chapter01/ex01-04.xls")
ex01_04 <- read_excel("data_sets/EXCEL/Chapter01/ex01-04.xls")
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
# Working with data imprted from an Excel file
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-01.xls")
# Working with data imprted from an Excel file
ex01_04 <- read.table("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-01.xls")
library(readxl)
ex01_04 <- read_excel("data_sets/EXCEL/Chapter01/ex01-04.xls")
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National #University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
library(readxl)
# Working with data imprted from an Excel file
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
linearModelEx04 = lm(ex01_04$Luminance ~ ex01_04$Time, data = ex01_04)
plot(ex01_04, main = "New Example Data")
summary(linearModelEx04) # Yhat = -8.388x + 22443.468
abline(linearModelEx04, col = "green")
# Working with data imprted from an Excel file
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-01.xls")
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-01.xls")
hist(ex01_01$Percent_expenditures, main = "Example Data From Chapter One", breaks = 20, col = "red")
boxplot(ex01_01, main = "Boxplot of Example Data", col = "blue")
sd(ex01_01$Percent_expenditures) # Standard Deviation is 12.7411
mean(ex01_01$Percent_expenditures) # Mean is 10.89167
var(ex01_01$Percent_expenditures) # Variance is 162.3357
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
linearModelEx04 = lm(ex01_04$Luminance ~ ex01_04$Time, data = ex01_04)
plot(ex01_04, main = "New Example Data")
summary(linearModelEx04) # Yhat = -8.388x + 22443.468
abline(linearModelEx04, col = "green")
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
library(readxl)
ex01_01 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-01.xls")
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
library(readxl)
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
linearModelEx04 = lm(ex01_04$Luminance ~ ex01_04$Time, data = ex01_04)
plot(ex01_04, main = "New Example Data")
summary(linearModelEx04) # Yhat = -8.388x + 22443.468
abline(linearModelEx04, col = "green")
x = c(10, 15, 20, 25, 30)
p1_x = c(.10, .20, .30, .30, .10)
y = c(5, 10, 15, 20)
p2_y = c(.20, .50, .20, .10)
hist(x)
ex01_04 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter01/ex01-04.xls")
linearModelEx04 = lm(ex01_04$Luminance ~ ex01_04$Time, data = ex01_04)
plot(ex01_04, main = "New Example Data")
summary(linearModelEx04) # Yhat = -8.388x + 22443.468
abline(linearModelEx04, col = "green")
View(e1.1)
View(ex01_01)
View(ex01_01)
View(ex01.04)
View(ex01.04)
day =c(1:24)
print(day)
meanForDay = c(95.47, 97.38, 96.85, 96.64, 96.87, 95.52, 96.08, 96.48, 96.63,
96.50, 97.22, 96.55, 97.02, 95.55, 96.29, 96.80, 96.01, 95.39,
96.58, 96.43, 97.06, 98.34, 96.42, 95.99)
library(qichart)
day =c(1:24)
meanForDay = c(95.47, 97.38, 96.85, 96.64, 96.87, 95.52, 96.08, 96.48, 96.63,
96.50, 97.22, 96.55, 97.02, 95.55, 96.29, 96.80, 96.01, 95.39,
96.58, 96.43, 97.06, 98.34, 96.42, 95.99)
library(qcc)
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("knitLatex", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
lines(day, meanForDay, type = l)
lines(day, meanForDay)
plot(day, meanForDay, main = "Mean Line Plot", col = "red")
lines(day, meanForDay)
plot(day, meanForDay, main = "Mean Line Plot", col = "red")
lines(day, meanForDay, type = l)
lines(day, meanForDay)
plot(day, meanForDay, main = "Mean Line Plot", col = "red")
lines(day, meanForDay)
library(DevFarn2)
library(qcc)
data(e6.1)
View(e6.1)
class(e6.1)
qcc(e6.1)
qcc(e6.1, type = "R")
qcc(e6.1, type = "xbar")
qcc(e6.1, type = "R") # Creating a R chart from the dataset
qcc(e6.1, type = "xbar") # Creating an xbar chart form the dataset (defaults to xbar)
hour = c(1:20)
controlChart_x1 = c(.36, .3, .51, .42, .39, .33, .43, .41, .37, .26, .36, .38, .29,
.44, .38, .31, .39, .43, .40, .40)
controlChart_x2 = c(.39, .35, .41, .37, .38, .41, .39, .32, .42, .42, .32, .47, .45,
.38, .37, .43, .49, .36, .45, .40)
controlChart_x3 = c(.36, .30, .42, .34, .38, .45, .41, .32, .36, .32, .36, .35, .39,
.43, .37, .38, .35, .38, .32, .32)
controlChartDataFrame = data.frame(hour, controlChart_x1, controlChart_x2, controlChart_x3)
qcc(controlChartDataFrame)
controlChartDataFrame = data.frame(controlChart_x1, controlChart_x2, controlChart_x3)
qcc(controlChartDataFrame)
qcc(controlChartDataFrame, type = "R")
rm hours
rm (hours)
# Creating a R-Chart
qcc(controlChartDataFrame, type = "R")
qcc(controlChartDataFrame, type = "S")
qcc(controlChartDataFrame, type = "xbar_one")
qcc(controlChartDataFrame, type = "xbar.one")
q18_x1 = c(13.02, 13.02, 13.04, 13.04, 12.96, 12.90, 12.97, 13.04, 13.05, 12.96,
12.90, 12.96, 13.00, 12.88, 12.96, 12.99, 13.05, 13.08, 13.02, 12.96,
12.98, 12.97, 13.04, 13.02, 12.93)
q18_x2 = c(12.95, 13.10, 13.08, 12.96, 12.97, 12.88, 12.96, 13.02, 13.10, 13.00,
13.05, 12.98, 12.96, 12.94, 12.96, 12.94, 13.02, 13.06, 13.05, 12.90,
12.99, 13.02, 13.00, 12.90, 12.88)
library(readxl)
exer06_0318 <- read_excel("data_sets/EXCEL/Chapter06/exer06-0318.xls")
View(exer06_0318)
library(readxl)
q18DataFrame = <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter06/ex06_0318.xls")
ex06_0318 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter06/ex06_0318.xls")
ex06_0318 <- read_excel("/Users/ccoussa717/Desktop/College Classes/National University/CSC220_AppliedStats/R_Code/data_sets/EXCEL/Chapter06/exer06-0318.xls")
qcc(ex06_0318)
qcc(ex06_0318, type = "R")
# part b
qcc(ex06_0318)
ex06_0318Corrected = ex06_0318[, -c(1)]
qcc(ex06_0318Corrected, type = "R")
# part b
qcc(ex06_0318Corrected)
View(ex06_0318Corrected)
###### Calculating x-bar (mean of the mean) and R-bar (mean of the range)
rowMeans(ex06_0318Corrected)
mean(rowMeans(ex06_0318Corrected))
# part b
qcc(ex06_0318Corrected)
# This line gets the mean of the range, or R-bar
apply(ex06_0318Corrected, 1, max) - apply(ex06_0318Corrected, 1, min)
# This line gets the mean of the range, or R-bar
mean(apply(ex06_0318Corrected, 1, max) - apply(ex06_0318Corrected, 1, min))
qcc(ex06_0318Corrected, type = "R")
library(gplots)
library(gplots)
###### Creating Venn Diagrams ######
a = c("HHH", "HTT", "THT", "TTT", "HHT")
install.packages("gplots")
library(gplots)
# Creates a list from variables a & b
v.list = list(a, b)
b = c("THH", "HTT", "HHT", "TTT", "TTH")
# Creates a list from variables a & b
v.list = list(a, b)
venn(v.list)
###### Creating random Normally Distributed data ######
normDis = rnorm(1000, mean = 100, sd = 15)
View(normDis)
plot(normDis)
mean(normDis)
sd(normDis)
###### Creating random Normally Distributed data ######
# Each time you run the rnorm command it will create a new set of random numbers
# so that the sd and mean will be different.
# If you add the set.see(1) command it will always generate the same numbers
set.seed(1)
normDis = rnorm(1000, mean = 100, sd = 15)
plot(normDis)
mean(normDis) # <---- Very close to 100 at 99.31906
sd(normDis) # <---- Very close to 15 at 15.71137
normDis = rnorm(1000, mean = 100, sd = 15)
plot(normDis)
mean(normDis) # <---- Very close to 100 at 99.82528
set.seed(1)
normDis = rnorm(1000, mean = 100, sd = 15)
plot(normDis)
mean(normDis) # <---- Very close to 100 at 99.82528
sd(normDis)
set.seed(1)
normDis = rnorm(1000, mean = 100, sd = 15)
# plot(normDis)
mean(normDis) # <---- Very close to 100 at 99.82528
sd(normDis)
set.seed(1)
normDis = rnorm(1000, mean = 100, sd = 15)
# plot(normDis)
mean(normDis) # <---- Very close to 100 at 99.82528
sd(normDis)
set.seed(1)
normDis = rnorm(1000, mean = 100, sd = 15)
# plot(normDis)
mean(normDis) # <---- Very close to 100 at 99.82528
sd(normDis)
set.seed(1)
normDis = rnorm(1000, mean = 100, sd = 15)
# plot(normDis)
mean(normDis) # <---- Very close to 100 at 99.82528
sd(normDis)
set.seed(1)
normDis = rnorm(1000, mean = 100, sd = 15)
# plot(normDis)
mean(normDis) # <---- Very close to 100 at 99.82528
sd(normDis)
set.seed(1)
normDis = rnorm(1000, mean = 100, sd = 15)
mean(normDis) # <---- Very close to 100 at 99.82528
sd(normDis) # <---- Very close to 15 at 15.52374
plot(normDis)
hist(normDis, probability = TRUE)
qqnorm(normDis)
#### Visualizing the distribution of the data
# Histogram of normDis dataset, shows the distribution of the dataset
hist(normDis, probability = TRUE)
View(ex06_0318Corrected)
library(DevFarn2)
library(qcc)
library(readxl)
library(gplots)
###### Wednesday Practice ######
# Practice Part 1
# Bring in e11.7 package from DevFarn2
data(e11.7)
View(e11.7)
# Make a histogram and boxplot for x variable
hist(e11.7)
# Make a histogram and boxplot for x variable
hist(e11.7$x)
# Make a histogram and boxplot for x variable
hist(e11.7$x, main = "x varible from e11.7 Dataset", col = "red")
# Make a histogram and boxplot for x variable
hist(e11.7$x, main = "x varible from e11.7 Dataset", col = "red", breaks = 10)
str(e11.7)
boxplot(e11.7, main = "Boxplot for e11.7 Dataset", col = "blue", horizontal = TRUE)
boxplot(e11.7$x, main = "Boxplot for e11.7 Dataset", col = "blue", horizontal = TRUE)
myDataModel = lm(y ~ x, data = e11.7)
myDataModel = lm(y ~ x, data = e11.7)
summary(myDataModel)
summary(myDataModel)$coefficant # Yhat = -0.29756x + 27.18294
summary(myDataModel)$coefficent # Yhat = -0.29756x + 27.18294
summary(myDataModel)$coefficents # Yhat = -0.29756x + 27.18294
summary(myDataModel)$coefficents
coef$summary(myDataModel)
summary(myDataModel)
abline(myDataModel)
plot(myDataModel, main = "Linear Regression Model", col = "green")
abline(myDataModel)
plot(myDataModel$x, main = "Linear Regression Model", col = "green")
plot(myDataModel$x, myDataModel$y, main = "Linear Regression Model", col = "green")
plot(e11.7$x, e11.7$y, main = "Linear Regression Model", col = "green")
abline(myDataModel)
coef(myDataModel, x = 25)
plot(e11.7$x, e11.7$y, main = "Linear Regression Model", col = "green")
abline(myDataModel)
summary(myDataModel)$coefficients # Y-hat = -0.29756x + 27.18294
plot(e11.7$x, e11.7$y, main = "Linear Regression Model", col = "green")
abline(myDataModel)
str(e11.7)
# Create a linear regression model Y-hat = mx + b
myDataModel = lm(y ~ x, data = e11.7)
View(myDataModel)
View(myDataModel)
# What is the coefficiant when x = 25, given Y-hat = -0.29756x + 27.18294?
# This is called the Predicted y, meaning what is Y-hat.
predict(myDataModel, data.frame(x = 25))
# To get the RESIDUAL, subtrat y-hat from y
myDataModelY_hat = 27.18294 - 19.74391
print(myDataModelY_hat)
plot(e11.7$x, e11.7$y, main = "Linear Regression Model", col = "green")
abline(myDataModel, col = 258, lwd = 2, lty =4)
abline(myDataModel, col = 258, lwd = 2)
plot(e11.7$x, e11.7$y, main = "Linear Regression Model", col = "green")
abline(myDataModel, col = 258, lwd = 2)
abline(myDataModel, col = 258, lwd = 2, lty =4)
plot(e11.7$x, e11.7$y, main = "Linear Regression Model", col = "green")
abline(myDataModel, col = 258, lwd = 2, lty =4)
plot(e11.7$x, e11.7$y, xlab = "x_Data", ylab = "y_data", main = "Linear Regression Model", col = "green")
abline(myDataModel, col = 258, lwd = 2, lty =4)
###### Part 2 ######
# Bring in the data from DevFarn2 e1.12, multiple x variables
data(e11.12)
str(e11.12)
# Preform a Multiple Linear Regression
plot(e11.12$Force, e11.12$Time, main = "Data is Force vs Time", xlab = "Forece", ylab = "Time", col = "green")
myMultipleData = lm(e11.12$Strength ~ e11.12$Force, e11.12$Power, e11.12$Temperature, e11.12$Time, data = e11.12)
str(e11.12)
myMultipleData = lm(Strength ~ Force + Power + Temperature + Time, data = e11.12)
summary(myMultipleData)
summary(myMultipleData)$coefficients
predict(myMultipleData, data.frame(Force = 35, Power = 75, Temperature = 200, Time = 20))
data(e2.18)
data(e2.18)
qqnorm(e2.18$X1)
qqline(e2.18$X1, col = "red")
data(e7.3)
str(e7.3)
data(e7.3)
str(e7.3)
boxplot(e7.3, horizontal = TRUE, xlab = "voltage")
mean(e7.4)
mean(e7.3)
sd(e7.3)
t.test(e7.3)
# Gets Confidence Interval using 80% as the level
t.test(e7.3, conf.level = .8)
str(e11.12)
residual_myMultipleData = -37.477 - 38.40667
print(residual_myMultipleData)
print(residual_myMultipleData)
x = c(2.4, -3.1, 8, 13, 11.24555)
y = c(3, 5, 6, 0, 355)
cor(x,y)
set.seed(10)
normDis = rnorm(50, mean = 1.55)
set.seed(10)
normDis1 = rnorm(50, mean = 1.55)
str(normDis1)
str(normDis1)
set.seed(10)
normDis1 = rnorm(50, mean = 1.55)
str(normDis1)
ppnorm(normDis1)
qqnorm(normDis1)
qqline(normDis1)
qqline(e2.18$X1, col = "red")
data(e2.18)
qqnorm(e2.18$X1)
qqline(e2.18$X1, col = "red")
qqnorm(normDis1)
qqline(normDis1)
# Mean with 75% Confidence Interval for normDis1
t.test(normDis1, conf.level = 75)
# Mean with 75% Confidence Interval for normDis1
t.test(normDis1, conf.level = .75)
# Mean with 75% Confidence Interval for normDis1
t.test(normDis1, conf.level = .75)
# Mean with 75% Confidence Interval for normDis1
t.test(normDis1, conf.level = .75)
x1Final = c(59.664, 59.661, 59.679, 59.665, 59.667, 59.673, 59.676,
59.648)
x2Final = c(59.675, 59.648, 59.652, 59.654, 59.678, 59.657, 59.661,
59.651)
library(qcc)
library("knitLatex", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
qcc(x1Final, x2Final, type = "xbar")
finalDataSet(x1Final, x2Final)
finalDataSet= (x1Final, x2Final)
finalDataSet= data.frame(x1Final, x2Final)
qcc(finalDataSet, type = "xbar")
qcc(finalDataSet, type = "rchart")
qcc(finalDataSet, type = "R")
# Checking my answer for number10(b)
xFinal = c(0, 1, 2, 3, 4)
pxFinal = c(.08, .15, .45, .27, .05)
var(xFinal, pxFinal)
xFinaldataset = data.frame(xFinal, pxFinal)
var(xFinaldataset)
sd(xFinal, pxFinal)
finalDataSet= data.frame(x1Final, x2Final)
# X-bar chart. There are no out-of-control signals in this chart
qcc(finalDataSet, type = "xbar")
# R-chart. There are no out-of-control signals in this chart
qcc(finalDataSet, type = "R")
library(qcc)
###### Question 13 ######
# Part a
# Setting the seed ensures R generates the same random numbers
set.seed(10)
# generating 50 random numbers
normDis1 = rnorm(50, mean = 1.55)
str(normDis1)
# Q-Q plot, and Q-Q line
qqnorm(normDis1)
qqline(normDis1)
# Part b
# Mean with 75% Confidence Interval for normDis1
t.test(normDis1, conf.level = .75)
# Part c
# R chart and x-bar chart
x1Final = c(59.664, 59.661, 59.679, 59.665, 59.667, 59.673, 59.676,
59.648)
x2Final = c(59.675, 59.648, 59.652, 59.654, 59.678, 59.657, 59.661,
59.651)
# Creating a dataframe from the variables
finalDataSet= data.frame(x1Final, x2Final)
# X-bar chart. There are no out-of-control signals in this chart
qcc(finalDataSet, type = "xbar")
# R-chart. There are no out-of-control signals in this chart
qcc(finalDataSet, type = "R")
